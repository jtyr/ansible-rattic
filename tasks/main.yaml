---

- name: Test distribution
  assert:
    that: >
      ansible_os_family == 'RedHat'

- name: Install dependencies
  package:
    name: "{{ item }}"
  with_items: "{{ rattic_pkgs }}"
  tags:
    - rattic_pkg

- name: Remove python-crypto package as it conflicts with pip crypto
  yum:
    name: python-crypto
    state: absent
  tags:
    - rattic_pkg

- name: Create Rattic home
  file:
    path: "{{ rattic_home }}"
    state: directory
    owner: root
    group: root
    mode: 0755
  tags:
    - rattic_pkg

- name: Download Rattic sources
  get_url:
    url: "{{ rattic_source_url }}"
    dest: /opt/{{ rattic_source_url | basename }}
    validate_certs: "{{ rattic_source_validate_certs }}"
  register: rattic_download_results
  tags:
    - rattic_pkg

- name: Extract Rattic sources
  unarchive:
    src: /opt/{{ rattic_source_url | basename }}
    dest: "{{ rattic_home }}"
    extra_opts: --strip-components=1
    remote_src: yes
  when: >
    rattic_download_results is defined and
    rattic_download_results.changed == true
  tags:
    - rattic_pkg

- name: Copy Python pip requirements file
  copy:
    src: requirements-base
    dest: "{{ rattic_home }}/requirements-base.txt"
  tags:
    - rattic_pkg

- name: Install Python pip dependencies from the requirements file
  pip:
    requirements: "{{ rattic_home }}/requirements-pgsql.txt"
    extra_args: >
      -i {{ rattic_pypi_url }}
      --trusted-host {{ rattic_pypi_host }}
  tags:
    - rattic_pkg

- name: Copy rattic config file
  template:
    src: defaults.cfg.j2
    dest: "{{ rattic_home }}/conf/defaults.cfg"
    mode: 0644
  tags:
    - rattic_pkg

- name: Create static directory
  file:
    path: "{{ rattic_home }}/static"
    state: directory
    mode: 0755
  tags:
    - rattic_pkg

- name: Create PostgreSQL DB
  postgresql_db:
    name: "{{ rattic_db_name }}"
    login_user: "{{ rattic_db_login_user }}"
    login_password: "{{ rattic_db_login_password }}"
    login_host: "{{ rattic_db_host }}"
    port: "{{ rattic_db_port }}"
  register: rattic_db_pgsql_created
  when: rattic_db_engine == 'postgresql'
  tags:
    - rattic_db

- name: Create PostgreSQL user
  postgresql_user:
    name: "{{ rattic_db_user }}"
    db: "{{ rattic_db_name }}"
    password: "{{ rattic_db_password }}"
    priv: ALL
    login_user: "{{ rattic_db_login_user }}"
    login_password: "{{ rattic_db_login_password }}"
    login_host: "{{ rattic_db_host }}"
    port: "{{ rattic_db_port }}"
  when: rattic_db_engine == 'postgresql'
  tags:
    - rattic_db

- name: Create MySQL DB
  mysql_db:
    name: "{{ rattic_db_name }}"
    login_host: "{{ rattic_db_host }}"
    login_port: "{{ rattic_db_port }}"
    login_user: "{{ rattic_db_login_user }}"
    login_password: "{{ rattic_db_login_password }}"
    encoding: utf8
  register: rattic_db_mysql_created
  when: rattic_db_engine == 'mysql'
  tags:
    - rattic_db

- name: Create MySQL user
  mysql_user:
    login_host: "{{ rattic_db_host }}"
    login_port: "{{ rattic_db_port }}"
    login_user: "{{ rattic_db_login_user }}"
    login_password: "{{ rattic_db_login_password }}"
    name: "{{ rattic_db_user }}"
    password: "{{ rattic_db_password }}"
    priv: "{{ rattic_db_name }}.*:ALL"
  when: rattic_db_engine == 'mysql'
  tags:
    - rattic_db

- name: Run manage script
  command: >
    chdir={{ rattic_home }} ./manage.py {{ item }}
  with_items:
    # This creates the DB tables
    - syncdb --noinput
    # This migrates new DB tables changes
    - migrate --all
    # This copies the static files
    - collectstatic -c --noinput
    # This creates the admin login
    - demosetup
  when: >
    rattic_download_results is defined and
    rattic_download_results.changed == true
  tags:
    - rattic_db

- name: Set correct permissions on the SQLite DB file
  file:
    path: "{{ rattic_home }}/{{ rattic_config_database_name }}"
    owner: "{{ rattic_db_sqlite_user }}"
    group: "{{ rattic_db_sqlite_group }}"
    mode: "{{ rattic_db_sqlite_mode }}"
  when: rattic_db_engine == 'sqlite'
  tags:
    - rattic_db

- name: Set correct permissions on the SQLite DB directory
  file:
    path: "{{ rattic_home }}/db"
    owner: root
    group: "{{ rattic_db_sqlite_group }}"
    mode: 0770
  when: rattic_db_engine == 'sqlite'
  tags:
    - rattic_db
